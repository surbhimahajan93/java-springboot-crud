name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.5'

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: ${{ env.GRADLE_VERSION }}

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Run unit tests
      run: ./gradlew test --tests "*ServiceTest" --tests "*ModelTest" --tests "*ExceptionHandlerTest"

    - name: Run integration tests
      run: ./gradlew test --tests "*ControllerTest" --tests "*RepositoryTest" --tests "*IntegrationTest"
      env:
        SPRING_DATA_MONGODB_HOST: localhost
        SPRING_DATA_MONGODB_PORT: 27017
        SPRING_DATA_MONGODB_DATABASE: testdb

    - name: Build application
      run: ./gradlew build -x test

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: build/reports/tests/
        retention-days: 30

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: build/libs/
        retention-days: 30

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: ${{ env.GRADLE_VERSION }}

    - name: Run SpotBugs
      run: ./gradlew spotbugsMain spotbugsTest

    - name: Run PMD
      run: ./gradlew pmdMain pmdTest

    - name: Upload SpotBugs results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: spotbugs-results
        path: build/reports/spotbugs/
        retention-days: 30

    - name: Upload PMD results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pmd-results
        path: build/reports/pmd/
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: ${{ env.GRADLE_VERSION }}

    - name: Run OWASP Dependency Check
      run: ./gradlew dependencyCheckAnalyze

    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-results
        path: build/reports/dependency-check-report.html
        retention-days: 30

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker build -t springboot-mongodb-crud:${{ github.sha }} .

    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: |
          springboot-mongodb-crud:${{ github.sha }}
        retention-days: 30

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, code-quality, security, docker]
    if: always()

    steps:
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ One or more jobs failed!"
        echo "Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

    - name: Notify on success
      if: success()
      run: |
        echo "✅ All jobs completed successfully!"
        echo "Build artifacts are available for download." 